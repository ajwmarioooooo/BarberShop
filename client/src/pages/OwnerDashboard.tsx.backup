import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, Clock, Phone, Mail, User, DollarSign, BarChart3, CalendarDays, LogOut, Trash2, Users, TrendingUp } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { AdminLogin } from "@/components/AdminLogin";
import type { LoyaltyCustomer } from "@shared/schema";

interface BookingData {
  id: number;
  customerName: string;
  customerPhone: string;
  customerEmail: string;
  appointmentDate: string;
  notes: string;
  status: string;
  serviceName: string;
  servicePrice: string;
  serviceDuration: number;
  barberName: string;
  createdAt: string;
}

interface DashboardStats {
  today: number;
  thisWeek: number;
  thisMonth: number;
  monthRevenue: number;
}

export function OwnerDashboard() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedBookingId, setSelectedBookingId] = useState<number | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [sessionPassword, setSessionPassword] = useState<string | null>(null);

  // Check for existing session on mount
  useEffect(() => {
    const savedAuth = sessionStorage.getItem('adminAuth');
    if (savedAuth) {
      setIsAuthenticated(true);
      setSessionPassword(savedAuth);
    }
  }, []);

  // Fetch dashboard statistics (always defined, but only enabled when authenticated)
  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({
    queryKey: ["/api/owner/dashboard/stats"],
    enabled: isAuthenticated,
  });

  // Fetch calendar bookings for next 30 days (always defined, but only enabled when authenticated)
  const { data: bookings, isLoading: bookingsLoading } = useQuery<BookingData[]>({
    queryKey: ["/api/owner/calendar"],
    enabled: isAuthenticated,
  });

  // Fetch today's bookings (always defined, but only enabled when authenticated)
  const { data: todayBookings, isLoading: todayLoading } = useQuery<BookingData[]>({
    queryKey: ["/api/owner/bookings/today"],
    enabled: isAuthenticated,
  });

  // Fetch completed bookings
  const { data: completedBookings, isLoading: completedLoading } = useQuery({
    queryKey: ["/api/owner/completed-bookings"],
    enabled: isAuthenticated,
  });

  // Fetch customer points
  const { data: customerPoints, isLoading: pointsLoading } = useQuery<LoyaltyCustomer[]>({
    queryKey: ["/api/owner/customer-points"],
    enabled: isAuthenticated,
  });

  // Update booking status mutation (always defined)
  const updateStatusMutation = useMutation({
    mutationFn: async ({ id, status, notes }: { id: number; status: string; notes?: string }) => {
      const response = await fetch(`/api/owner/bookings/${id}/status`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status, notes }),
      });
      if (!response.ok) throw new Error('Failed to update status');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/owner/calendar"] });
      queryClient.invalidateQueries({ queryKey: ["/api/owner/bookings/today"] });
      queryClient.invalidateQueries({ queryKey: ["/api/owner/dashboard/stats"] });
      toast({
        title: "Статус обновен",
        description: "Статусът на резервацията беше променен успешно.",
        className: "bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-300 text-green-800 shadow-lg",
      });
      setSelectedBookingId(null);
    },
    onError: () => {
      toast({
        title: "Грешка",
        description: "Неуспешна промяна на статуса.",
        className: "bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-300 text-red-800 shadow-lg",
      });
    },
  });

  // Delete booking mutation
  const deleteBookingMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await fetch(`/api/owner/bookings/${id}`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
      });
      if (!response.ok) throw new Error('Failed to delete booking');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/owner/calendar"] });
      queryClient.invalidateQueries({ queryKey: ["/api/owner/bookings/today"] });
      queryClient.invalidateQueries({ queryKey: ["/api/owner/dashboard/stats"] });
      toast({
        title: "Резервация изтрита",
        description: "Резервацията беше изтрита успешно.",
        className: "bg-gradient-to-r from-orange-50 to-red-50 border-2 border-orange-300 text-orange-800 shadow-lg",
      });
    },
    onError: () => {
      toast({
        title: "Грешка",
        description: "Неуспешно изтриване на резервацията.",
        className: "bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-300 text-red-800 shadow-lg",
      });
    },
  });

  const handleLogin = (password: string) => {
    setIsAuthenticated(true);
    setSessionPassword(password);
    sessionStorage.setItem('adminAuth', password);
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setSessionPassword(null);
    sessionStorage.removeItem('adminAuth');
    toast({
      title: "Излизане",
      description: "Успешно излязохте от администраторския панел.",
      className: "bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-300 text-blue-800 shadow-lg",
    });
  };

  // Show login screen if not authenticated
  if (!isAuthenticated) {
    return <AdminLogin onLogin={handleLogin} />;
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('bg-BG', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('bg-BG', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed': return 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md';
      case 'completed': return 'bg-gradient-to-r from-green-500 to-green-600 text-white shadow-md';
      case 'cancelled': return 'bg-gradient-to-r from-red-500 to-red-600 text-white shadow-md';
      default: return 'bg-gradient-to-r from-gray-400 to-gray-500 text-white shadow-md';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'confirmed': return 'Потвърдена';
      case 'completed': return 'Завършена';
      case 'cancelled': return 'Отменена';
      default: return status;
    }
  };

  // Add debugging
  console.log('Owner Dashboard State:', {
    isAuthenticated,
    statsLoading,
    bookingsLoading,
    todayLoading,
    stats,
    bookings: bookings?.length,
    todayBookings: todayBookings?.length
  });

  if (statsLoading || bookingsLoading || todayLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-sand-light to-sand-dark/10 p-4">
        <div className="max-w-7xl mx-auto">
          <div className="text-center py-8">
            <h1 className="text-2xl font-bold text-sand-dark mb-4">BLACKSEA BARBER</h1>
            <p className="text-sand-dark/70">Зареждане на администраторския панел...</p>
          </div>
          <div className="animate-pulse space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {[1, 2, 3, 4].map((i) => (
                <div key={i} className="h-32 bg-sand-dark/20 rounded-lg"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-sand-light to-sand-dark/10">
      <div className="max-w-7xl mx-auto p-4 space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center py-8">
          <div className="text-center flex-1">
            <h1 className="text-4xl font-bold text-sand-dark mb-2">
              BLACKSEA BARBER
            </h1>
            <p className="text-lg text-sand-dark/70">Администраторски панел</p>
          </div>
          <Button
            onClick={handleLogout}
            variant="outline"
            size="sm"
            className="border-sand-dark/20 text-sand-dark hover:bg-sand-dark/10"
          >
            <LogOut className="h-4 w-4 mr-2" />
            Излез
          </Button>
        </div>

        {/* Statistics Cards */}
        <div className="md:grid md:grid-cols-4 md:gap-6 hidden md:block">
          {/* Desktop Grid Layout */}
          <Card className="border-0 bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-blue-100">Днес</CardTitle>
              <CalendarDays className="h-5 w-5 text-blue-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-white">{stats?.today ?? 0}</div>
              <p className="text-xs text-blue-200">резервации</p>
            </CardContent>
          </Card>

          <Card className="border-0 bg-gradient-to-br from-green-500 to-green-600 text-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-green-100">Тази седмица</CardTitle>
              <BarChart3 className="h-5 w-5 text-green-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-white">{stats?.thisWeek ?? 0}</div>
              <p className="text-xs text-green-200">резервации</p>
            </CardContent>
          </Card>

          <Card className="border-0 bg-gradient-to-br from-purple-500 to-purple-600 text-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-purple-100">Този месец</CardTitle>
              <Calendar className="h-5 w-5 text-purple-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-white">{stats?.thisMonth ?? 0}</div>
              <p className="text-xs text-purple-200">резервации</p>
            </CardContent>
          </Card>

          <Card className="border-0 bg-gradient-to-br from-orange-500 to-orange-600 text-white shadow-lg hover:shadow-xl transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-orange-100">Приходи м-ц</CardTitle>
              <DollarSign className="h-5 w-5 text-orange-200" />
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-white">{stats?.monthRevenue?.toFixed(2) ?? '0.00'} лв</div>
              <p className="text-xs text-orange-200">завършени услуги</p>
            </CardContent>
          </Card>
        </div>

        {/* Mobile Slider for Statistics Cards */}
        <div className="md:hidden">
          <div className="mb-3 text-center">
            <h3 className="text-lg font-semibold text-sand-dark mb-1">Статистика</h3>
            <p className="text-sm text-sand-dark/70">Прекарайте за повече информация</p>
          </div>
          <div className="flex overflow-x-auto space-x-4 pb-4 scrollbar-hide snap-x snap-mandatory">
            <Card className="border-0 bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-lg hover:shadow-xl transition-shadow min-w-[280px] flex-shrink-0 snap-center">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-blue-100">Днес</CardTitle>
                <CalendarDays className="h-5 w-5 text-blue-200" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-white">{stats?.today ?? 0}</div>
                <p className="text-xs text-blue-200">резервации</p>
              </CardContent>
            </Card>

            <Card className="border-0 bg-gradient-to-br from-green-500 to-green-600 text-white shadow-lg hover:shadow-xl transition-shadow min-w-[280px] flex-shrink-0 snap-center">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-green-100">Тази седмица</CardTitle>
                <BarChart3 className="h-5 w-5 text-green-200" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-white">{stats?.thisWeek ?? 0}</div>
                <p className="text-xs text-green-200">резервации</p>
              </CardContent>
            </Card>

            <Card className="border-0 bg-gradient-to-br from-purple-500 to-purple-600 text-white shadow-lg hover:shadow-xl transition-shadow min-w-[280px] flex-shrink-0 snap-center">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-purple-100">Този месец</CardTitle>
                <Calendar className="h-5 w-5 text-purple-200" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-white">{stats?.thisMonth ?? 0}</div>
                <p className="text-xs text-purple-200">резервации</p>
              </CardContent>
            </Card>

            <Card className="border-0 bg-gradient-to-br from-orange-500 to-orange-600 text-white shadow-lg hover:shadow-xl transition-shadow min-w-[280px] flex-shrink-0 snap-center">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium text-orange-100">Приходи м-ц</CardTitle>
                <DollarSign className="h-5 w-5 text-orange-200" />
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-white">{stats?.monthRevenue?.toFixed(2) ?? '0.00'} лв</div>
                <p className="text-xs text-orange-200">завършени услуги</p>
              </CardContent>
            </Card>
          </div>
          
          {/* Mobile Slider Dots Indicator */}
          <div className="flex justify-center space-x-2 mt-4">
            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
            <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
          </div>
        </div>

        {/* Main Dashboard Content with Tabs */}
        <Tabs defaultValue="today" className="w-full">
          <TabsList className="grid w-full grid-cols-4 mb-6">
            <TabsTrigger value="today" className="flex items-center gap-2">
              <CalendarDays className="h-4 w-4" />
              Днес
            </TabsTrigger>
            <TabsTrigger value="upcoming" className="flex items-center gap-2">
              <Calendar className="h-4 w-4" />
              Предстоящи
            </TabsTrigger>
            <TabsTrigger value="completed" className="flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              Завършени
            </TabsTrigger>
            <TabsTrigger value="customers" className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              Клиенти
            </TabsTrigger>
          </TabsList>

          {/* Today's Bookings Tab */}
          <TabsContent value="today">
            <Card className="border-0 bg-gradient-to-r from-blue-50 to-indigo-50 shadow-lg">
          <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-lg">
            <CardTitle className="text-white flex items-center gap-2">
              <CalendarDays className="h-5 w-5" />
              Днешни резервации
            </CardTitle>
            <CardDescription className="text-blue-100">Резервации за днес ({new Date().toLocaleDateString('bg-BG')})</CardDescription>
          </CardHeader>
          <CardContent>
            {todayBookings && todayBookings.length > 0 ? (
              <div className="space-y-4">
                {todayBookings.map((booking) => (
                  <div key={booking.id} className="border-l-4 border-l-blue-500 rounded-lg p-3 sm:p-4 bg-gradient-to-r from-blue-50/50 to-white shadow-md hover:shadow-lg transition-shadow">
                    <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-2 mb-3">
                      <div className="flex items-center gap-2 min-w-0 flex-1">
                        <div className="p-1.5 bg-blue-100 rounded-full">
                          <User className="h-3 w-3 sm:h-4 sm:w-4 text-blue-600 flex-shrink-0" />
                        </div>
                        <span className="font-semibold text-gray-800 text-sm sm:text-base truncate">{booking.customerName}</span>
                        <Badge className={getStatusColor(booking.status)}>
                          {getStatusText(booking.status)}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-1 text-xs sm:text-sm bg-gradient-to-r from-blue-500 to-blue-600 px-3 py-1.5 rounded-full text-white shadow-md whitespace-nowrap">
                        <Clock className="h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0" />
                        <span className="font-semibold">{formatTime(booking.appointmentDate)}</span>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 text-sm bg-green-50 p-2 rounded-lg">
                          <div className="p-1 bg-green-100 rounded-full">
                            <Phone className="h-3 w-3 text-green-600" />
                          </div>
                          <span className="text-gray-700">{booking.customerPhone}</span>
                        </div>
                        <div className="flex items-center gap-3 text-sm bg-purple-50 p-2 rounded-lg">
                          <div className="p-1 bg-purple-100 rounded-full">
                            <Mail className="h-3 w-3 text-purple-600" />
                          </div>
                          <span className="text-gray-700">{booking.customerEmail}</span>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="text-sm bg-orange-50 p-2 rounded-lg">
                          <strong className="text-orange-700">Услуга:</strong> <span className="text-gray-700">{booking.serviceName}</span>
                        </div>
                        <div className="text-sm bg-indigo-50 p-2 rounded-lg">
                          <strong className="text-indigo-700">Майстор:</strong> <span className="text-gray-700">{booking.barberName}</span>
                        </div>
                        <div className="text-sm bg-emerald-50 p-2 rounded-lg">
                          <strong className="text-emerald-700">Цена:</strong> <span className="text-gray-700 font-semibold">{booking.servicePrice} лв</span>
                        </div>
                      </div>
                    </div>

                    {booking.notes && (
                      <div className="mt-3 p-3 bg-gradient-to-r from-yellow-50 to-amber-50 border-l-4 border-l-yellow-400 rounded-r-lg text-sm">
                        <strong className="text-yellow-700">Бележки:</strong> <span className="text-gray-700">{booking.notes}</span>
                      </div>
                    )}

                    <div className="mt-4 flex flex-col sm:flex-row gap-3 justify-end">
                      <Button
                        onClick={() => deleteBookingMutation.mutate(booking.id)}
                        variant="outline"
                        size="sm"
                        className="bg-gradient-to-r from-red-500 to-red-600 text-white border-0 hover:from-red-600 hover:to-red-700 w-full sm:w-auto"
                        disabled={deleteBookingMutation.isPending}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        {deleteBookingMutation.isPending ? "Изтрива..." : "Изтрий"}
                      </Button>
                      <Select
                        value={selectedBookingId === booking.id ? "" : booking.status}
                        onValueChange={(value) => {
                          setSelectedBookingId(booking.id);
                          updateStatusMutation.mutate({ id: booking.id, status: value });
                        }}
                      >
                        <SelectTrigger className="w-full sm:w-[180px] bg-gradient-to-r from-blue-500 to-indigo-500 text-white border-0 hover:from-blue-600 hover:to-indigo-600">
                          <SelectValue placeholder="Промени статус" />
                        </SelectTrigger>
                        <SelectContent className="bg-white border-2 border-blue-200 shadow-lg">
                          <SelectItem value="confirmed" className="hover:bg-blue-50 text-blue-700 font-medium">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                              Потвърдена
                            </div>
                          </SelectItem>
                          <SelectItem value="completed" className="hover:bg-green-50 text-green-700 font-medium">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                              Завършена
                            </div>
                          </SelectItem>
                          <SelectItem value="cancelled" className="hover:bg-red-50 text-red-700 font-medium">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                              Отменена
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center text-muted-foreground py-8">
                Няма резервации за днес
              </p>
            )}
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>

        {/* Upcoming Bookings Calendar */}
        <Card className="border-0 bg-gradient-to-r from-green-50 to-emerald-50 shadow-lg">
          <CardHeader className="bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-t-lg">
            <CardTitle className="text-white flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              Предстоящи резервации
            </CardTitle>
            <CardDescription className="text-green-100">Следващи 30 дни</CardDescription>
          </CardHeader>
          <CardContent>
            {bookings && bookings.length > 0 ? (
              <div className="space-y-4">
                {bookings.map((booking) => (
                  <div key={booking.id} className="border-l-4 border-l-green-500 rounded-lg p-3 sm:p-4 bg-gradient-to-r from-green-50/50 to-white shadow-md hover:shadow-lg transition-shadow">
                    <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-3 mb-3">
                      <div className="flex items-center gap-2 min-w-0 flex-1">
                        <div className="p-1.5 bg-green-100 rounded-full">
                          <User className="h-3 w-3 sm:h-4 sm:w-4 text-green-600 flex-shrink-0" />
                        </div>
                        <span className="font-semibold text-gray-800 text-sm sm:text-base truncate">{booking.customerName}</span>
                        <Badge className={getStatusColor(booking.status)}>
                          {getStatusText(booking.status)}
                        </Badge>
                      </div>
                      <div className="flex flex-col sm:flex-row gap-2 text-xs sm:text-sm">
                        <div className="flex items-center gap-1 bg-gradient-to-r from-indigo-500 to-indigo-600 px-3 py-1.5 rounded-full text-white shadow-md whitespace-nowrap">
                          <Calendar className="h-3 w-3 flex-shrink-0" />
                          <span className="font-semibold">{formatDate(booking.appointmentDate)}</span>
                        </div>
                        <div className="flex items-center gap-1 bg-gradient-to-r from-green-500 to-green-600 px-3 py-1.5 rounded-full text-white shadow-md whitespace-nowrap">
                          <Clock className="h-3 w-3 flex-shrink-0" />
                          <span className="font-semibold">{formatTime(booking.appointmentDate)}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-3 text-sm bg-green-50 p-2 rounded-lg">
                          <div className="p-1 bg-green-100 rounded-full">
                            <Phone className="h-3 w-3 text-green-600" />
                          </div>
                          <span className="text-gray-700">{booking.customerPhone}</span>
                        </div>
                        <div className="flex items-center gap-3 text-sm bg-purple-50 p-2 rounded-lg">
                          <div className="p-1 bg-purple-100 rounded-full">
                            <Mail className="h-3 w-3 text-purple-600" />
                          </div>
                          <span className="text-gray-700">{booking.customerEmail}</span>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="text-sm bg-orange-50 p-2 rounded-lg">
                          <strong className="text-orange-700">Услуга:</strong> <span className="text-gray-700">{booking.serviceName}</span>
                        </div>
                        <div className="text-sm bg-indigo-50 p-2 rounded-lg">
                          <strong className="text-indigo-700">Майстор:</strong> <span className="text-gray-700">{booking.barberName}</span>
                        </div>
                        <div className="text-sm bg-emerald-50 p-2 rounded-lg">
                          <strong className="text-emerald-700">Цена:</strong> <span className="text-gray-700 font-semibold">{booking.servicePrice} лв ({booking.serviceDuration} мин)</span>
                        </div>
                      </div>
                    </div>

                    {booking.notes && (
                      <div className="mt-3 p-3 bg-gradient-to-r from-yellow-50 to-amber-50 border-l-4 border-l-yellow-400 rounded-r-lg text-sm">
                        <strong className="text-yellow-700">Бележки:</strong> <span className="text-gray-700">{booking.notes}</span>
                      </div>
                    )}

                    <div className="mt-4 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3">
                      <div className="text-xs bg-slate-100 px-3 py-1.5 rounded-full text-slate-600 order-2 sm:order-1 font-medium">
                        Резервация #{booking.id} • Създадена: {formatDate(booking.createdAt)}
                      </div>
                      
                      <div className="order-1 sm:order-2 flex flex-col sm:flex-row gap-3">
                        <Button
                          onClick={() => deleteBookingMutation.mutate(booking.id)}
                          variant="outline"
                          size="sm"
                          className="bg-gradient-to-r from-red-500 to-red-600 text-white border-0 hover:from-red-600 hover:to-red-700 w-full sm:w-auto"
                          disabled={deleteBookingMutation.isPending}
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          {deleteBookingMutation.isPending ? "Изтрива..." : "Изтрий"}
                        </Button>
                        <Select
                          value={selectedBookingId === booking.id ? "" : booking.status}
                          onValueChange={(value) => {
                            setSelectedBookingId(booking.id);
                            updateStatusMutation.mutate({ id: booking.id, status: value });
                          }}
                        >
                          <SelectTrigger className="w-full sm:w-[180px] bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 hover:from-green-600 hover:to-emerald-600">
                            <SelectValue placeholder="Промени статус" />
                          </SelectTrigger>
                          <SelectContent className="bg-white border-2 border-green-200 shadow-lg">
                            <SelectItem value="confirmed" className="hover:bg-blue-50 text-blue-700 font-medium">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                                Потвърдена
                              </div>
                            </SelectItem>
                            <SelectItem value="completed" className="hover:bg-green-50 text-green-700 font-medium">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                                Завършена
                              </div>
                            </SelectItem>
                            <SelectItem value="cancelled" className="hover:bg-red-50 text-red-700 font-medium">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                                Отменена
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center text-muted-foreground py-8">
                Няма предстоящи резервации
              </p>
            )}
          </CardContent>
        </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
